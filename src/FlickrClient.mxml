<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
							xmlns:s="library://ns.adobe.com/flex/spark" 
							creationComplete="init(event)"
							splashScreenImage="@Embed('assets/images/splashScreenWithWhite.png')"
							splashScreenMinimumDisplayTime="1000"
							splashScreenScaleMode="zoom"
							>
	
	<fx:Style source="styles/MainStyle.css"/>
	
	<fx:Script>
		<![CDATA[
			import VOs.DataObject;
			
			import com.adobe.webapis.flickr.AuthPerm;
			import com.adobe.webapis.flickr.FlickrService;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			import com.squidzoo.eventSystem.events.CustomEvent;
			
			import components.MenuPopUp;
			
			import helpers.NSIDManager;
			import helpers.TokenManager;
			
			import mx.events.FlexEvent;
			
			import spark.transitions.ViewTransitionDirection;
			import spark.transitions.ZoomViewTransition;
			import spark.transitions.ZoomViewTransitionMode;
			
			import statics.Keys;
			import statics.NSID;
			import statics.Service;
			import statics.ViewTypes;
			
			import views.BatchUploadView;
			import views.BrowseSets;
			import views.HomeView;
			import views.LoginView;
			import views.MultiplePhotosView;
			import views.SearchView;
			import views.SinglePhotoView;
			
			private var _popup:MenuPopUp;
			
			public var _service:FlickrService;
			
			private function init(event:FlexEvent):void{
				addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
				_popup = new MenuPopUp();
				
				_service = new FlickrService();
				
				Service.setService(_service);
				
				_service.api_key = Keys.getApiKey();
				_service.secret = Keys.getSecretKey();
				_service.permission = AuthPerm.WRITE;
			
				trace("FlickrClient: TokenManager.isValid() :"+TokenManager.isValid());
				if(TokenManager.isValid()==true){
					trace("FlickrClient: TokenManager.getToken(): "+TokenManager.getToken());
					_service.token = TokenManager.getToken();
					trace("FlickrClient: NSIDManager.getNSID()) "+NSIDManager.getNSID());
					NSID.setNSID(NSIDManager.getNSID());
					navigator.pushView(views.HomeView);	
				}else{
					("FlickrClient: there is no token");
					navigator.pushView(views.LoginView);
				}
				
				//this.actionBar.alpha=0;
				//this.actionBar.visible=false;
				
				//var zoomTrans:ZoomViewTransition = new ZoomViewTransition();
				//zoomTrans.direction = ViewTransitionDirection.RIGHT;
				//zoomTrans.mode = ZoomViewTransitionMode.IN; //or OUT mode
				//navigator.pushView(LoginView);
				//navigator.pushView(LoginView,_service);
				addMenuListeners();
			}
			
			private function onAddedToStage(event:Event):void
			{
				//removes listener
				removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
				stage.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);
			}
			
			private function addMenuListeners():void{
				EventCentral.getInstance().addEventListener(CustomEvent.ACTIONBAR_MENU_ICON_CLICKED_UPLOAD, onUpload);
				EventCentral.getInstance().addEventListener(CustomEvent.ACTIONBAR_MENU_ICON_CLICKED_BROWSE_SETS, onBrowseSets);
				EventCentral.getInstance().addEventListener(CustomEvent.ACTIONBAR_MENU_ICON_CLICKED_PHOTOSTREAM, onPhotostream);
				EventCentral.getInstance().addEventListener(CustomEvent.ACTIONBAR_MENU_ICON_CLICKED_SEARCH, onSearch);
				EventCentral.getInstance().addEventListener(CustomDataEvent.IMAGE_IN_LIST_CLICKED,onImageInListClicked);
			}
			
			private function onUpload(event:CustomEvent):void{
				navigator.pushView(BatchUploadView,_service);
			}
			
			private function onBrowseSets(event:CustomEvent):void{
				navigator.pushView(BrowseSets,_service);
			}
			
			public function getService():FlickrService{
				return _service;
			}		
			
			protected function onPhotostream(event:Event):void
			{
				var dataObject:DataObject = new DataObject();
				dataObject.viewType = ViewTypes.PHOTO_STREAM;
				navigator.pushView(MultiplePhotosView,dataObject);
			}
			
			protected function onSearch(event:Event):void
			{
				navigator.pushView(SearchView);
			}
			
			protected function onImageInListClicked(event:CustomDataEvent):void
			{
				// TODO Auto-generated method stub
				navigator.pushView(SinglePhotoView,event.photoVO);
			}
			
			private function _onKeyDown(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.BACK)
				{
					event.preventDefault();
					trace("\nBack Pressed");
				} else if(event.keyCode == Keyboard.MENU)
				{
					event.preventDefault();
					trace("\nMenu Pressed");
					_popup.show();
				} else if(event.keyCode == Keyboard.SEARCH)
				{
					event.preventDefault();
					trace("\nSearch Pressed");
				}
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<s:Button icon="@Embed('assets/images/FastrHome.png')" click="navigator.pushView(HomeView)"/>
	</s:navigationContent>
	
	<s:actionContent>
		<s:Button id="menuButton" icon="@Embed(source='assets/images/menuLightGrey.png')" click="_popup.show()"/>
	</s:actionContent>
	
</s:ViewNavigatorApplication>
