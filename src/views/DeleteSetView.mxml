<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"  
		xmlns:components="components.*" 
		xmlns:styles="styles.*"
		creationComplete="creationCompleteHandler(event)" 
		>
	
	<s:states>
		<s:State name="startState"/>
		<s:State name="waitState"/>
		<s:State name="resultState"/>
		<s:State name="errorState"/>
	</s:states>
	
	<styles:GraphicsLib id="graphicsLib"/>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import spark.transitions.SlideViewTransition;
			
			import factories.IconFactory;
			import statics.Service;
			private var _service:FlickrService;
			private var _photosetId:String;
			
			[Bindable]private var _selection:String = "none";
			
			[Bindable]private var _headerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth;
			
			[Bindable]private var _containerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*2;
			[Bindable]private var _contentWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*4;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				currentState = "startState";
				
				_service = Service.getService();
				
				this.addEventListener( TransformGestureEvent.GESTURE_SWIPE, handleSwipe );
				
				EventCentral.getInstance().addEventListener(CustomDataEvent.SET_SELECTED_IN_SET_LIST, onSetSelectedInSetList);
			}
			
			protected function onSetSelectedInSetList(event:CustomDataEvent):void
			{
				_selection = event.setVO.title;
				_photosetId = event.setVO.id;
			}
			
			protected function onClickDelete(event:MouseEvent):void
			{
					currentState = "waitState"
					_service.addEventListener(FlickrResultEvent.PHOTOSETS_DELETE,onDelete);
					_service.photosets.deleteSet(_photosetId);			
			}
			
			protected function onDelete(event:FlickrResultEvent):void
			{
				currentState = "resultState";
				setList.reload();
				confirmationText.text = _selection;
				_selection = "";
			}
			
			private function handleSwipe(event:TransformGestureEvent):void
			{
				if (event.offsetX == 1 ) 
				{
					slideRight();	
				}
			}
			
			private function onClickYourSetsBreadCrumb():void
			{
				slideRight();
			}
			
			private function onClickCancel():void{
				slideRight();
			}
			
			private function slideRight():void{
				var rightSlide:SlideViewTransition = new SlideViewTransition();
				rightSlide.direction = "right";					
				navigator.pushView(BrowseSets,null,null,rightSlide);
			}
			
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" gap="0" >
		
		<components:BreadCrumbHeader firstText="Your Sets" firstTextClickHandler="onClickYourSetsBreadCrumb"
									 imageSource="{IconFactory.getIcon(IconFactory.REMOVE_ICON)}"
									 secondText="Delete Set"/>
		
		<s:VGroup gap="20" paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		
		<s:TextArea contentBackgroundAlpha="0" borderVisible="false" editable="false" selectable="false"
					styleName="bodyText" width="100%" height="100" includeIn="startState">
			<s:text>Deleting a set does not delete the pictures inside it.
			They are still available in your photostream.</s:text>
		</s:TextArea>
			
		<s:VGroup paddingLeft="20" includeIn="waitState" height="100" horizontalCenter="0" verticalAlign="middle" verticalCenter="0">
			<s:BusyIndicator symbolColor="white" scaleX="2" scaleY="2"/>
		</s:VGroup>	
			
		<s:VGroup paddingLeft="20" includeIn="resultState" height="100" verticalAlign="middle" verticalCenter="0">
			<s:Label text="The following set has been deleted:" color="#ffffff" fontSize="18" fontWeight="bold"/>
			<s:Label id="confirmationText" color="#ffffff" fontSize="18" fontWeight="bold"/>
		</s:VGroup>	
		
		<s:SkinnableContainer skinClass="skins.BlueRectangleWithRoundCornersSkin" contentBackgroundAlpha="0" width="{_containerWidth}">
			<s:VGroup paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20" gap="10">
		
				<s:Label text="Selection: {_selection}" styleName="headerTextGrey" filters="{[graphicsLib.getDropShadowFilterWhite()]}"/>	
				<s:VGroup horizontalAlign="center" horizontalCenter="0" width="100%">				
					<components:SetList id="setList" width="{_contentWidth}"/>
				</s:VGroup>
				
				<s:HGroup verticalAlign="middle" gap="20">		
					<s:Button label="Delete the selected set" click="onClickDelete(event)" skinClass="skins.SquareButtonSkin"/>
					<s:Button label="Cancel" click="onClickCancel()" skinClass="skins.SquareButtonSkin"/>
				</s:HGroup>		  
	
			</s:VGroup>
		</s:SkinnableContainer>		
				
		</s:VGroup>	
			
	</s:VGroup>
	
</s:View>
