<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Upload"
		creationComplete="init()"
		viewActivate="viewActivateHandler(event)" xmlns:debug="com.squidzoo.debug.*"
		destructionPolicy="never">
	<fx:Script>
		<![CDATA[
			import VOs.BatchUploadVO;
			
			import com.adobe.webapis.flickr.FlickrService;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import components.PrivacySettingsPopup;
			
			import helpers.GalleryBrowser;
			import helpers.Uploader;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.ViewNavigatorEvent;
			
			import statics.Service;
			
			private var _browser:GalleryBrowser;
			[Bindable]
			private var _selectedImage:Bitmap;
			[Bindable]
			protected var _service:FlickrService;
			[Bindable]
			private var _title:String = "add your title";
			[Bindable]
			private var _description:String = "add your description";
			[Bindable]
			private var _tags:String = "add your tags:";
			[Bindable]
			private var _is_family:Boolean = true;
			[Bindable]
			private var _is_public:Boolean = false;
			[Bindable]
			private var _is_friend:Boolean = false;
			
			private var _uploader:Uploader;
			
			private var _fileRef:FileReference;
			private var _privacyPopup:PrivacySettingsPopup;
			
			
			[Bindable]
			private var _uploadStatus:String = "not started";
			
			[Bindable]
			private var _batchUploadAC:ArrayCollection = new ArrayCollection(new Array());
			
			//public var forCompiler:BatchUploadView;//required
			
			private function viewActivateHandler(event:ViewNavigatorEvent):void{
				
				photoList.scroller.setStyle('horizontalScrollPolicy', 'ScrollPolicy.OFF');
				
				_service = Service.getService();
				
				EventCentral.getInstance().addEventListener(CustomDataEvent.REMOVE_IMAGE_FROM_UPLOAD_LIST,onRemoveImageFromList);
				EventCentral.getInstance().addEventListener(CustomDataEvent.PRIVACY_SETTINGS,onPrivacySettings);
				EventCentral.getInstance().addEventListener(CustomDataEvent.SETTINGS_SELECTED, onSettingsSelected);
			}
			
			protected function onSettingsSelected(event:CustomDataEvent):void
			{
				
				_title = event.settingsVO.title;
				_description = event.settingsVO.description;
				_tags = event.settingsVO.tags;
			}
			
			private function init():void{
				_browser = new GalleryBrowser();
			}
			
			private function onClickPickPhotoButton(event:MouseEvent):void
			{ 
				_browser.addEventListener(CustomDataEvent.GALLERY_IMAGE_SELECTED,onGalleryImageSelected);
				_browser.browse();
			}
			
			private function onGalleryImageSelected(event:CustomDataEvent):void{
				_browser.removeEventListener(CustomDataEvent.GALLERY_IMAGE_SELECTED,onGalleryImageSelected);
				
				var selectedImage:Bitmap = event.image;
				
				var vo:BatchUploadVO = new BatchUploadVO(event.fileReference,selectedImage);
				vo.fileName = event.fileReference.name;
				_batchUploadAC.addItemAt(vo,0);
				_selectedImage = selectedImage;
			}
			
			private function onClickUploadListButton():void{
				
				_uploader = new Uploader(_service);
				
				for(var i:int = 0;i <_batchUploadAC.length;i++){
					
					var vo:BatchUploadVO = _batchUploadAC[i];
					
					_uploader.upload(vo.file,_title,_description,_tags,_is_public,_is_friend,_is_family);
				}
			}
			
			private function onChooseSet():void{
				
			}
			
			protected function onRemoveImageFromList(event:CustomDataEvent):void
			{
				for(var i:int = i; i < _batchUploadAC.length; i++){
					if(event.string == _batchUploadAC[i].fileName){
						_batchUploadAC.removeItemAt(i);
					}
				}
			}
			
			protected function onClickPrivacySettingsButton(event:MouseEvent):void
			{
				navigator.pushView(SettingsView);
				//_privacyPopup = new PrivacySettingsPopup();
				//_privacyPopup.show();
			}
			
			protected function onPrivacySettings(event:CustomDataEvent):void
			{
				if(event.string == "public"){
					_is_family = false;
					_is_friend = false;
					_is_public = true;
				}else if(event.string == "friend"){
					_is_family = false;
					_is_friend = true;
					_is_public = false;
				}else{
					_is_family = true;
					_is_friend = false;
					_is_public = false;
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="PermissionRadioButtonsGroup"/>
	</fx:Declarations>
	
	<!--<s:actionContent>
	<s:Button id="menuButton" icon="@Embed(source='assets/images/menuLightGrey.png')" click="_popup.show()"/>
	</s:actionContent>-->
	<s:HGroup paddingLeft="20" paddingRight="0" paddingTop="15" width="100%" height="100%">
		<s:VGroup gap="10">
			
			<!--<s:Image id="imageContainer" width="173" height="141" source="{_selectedImage}"/>-->
			
			<s:Button id="pickPhotoButton"
					  click="onClickPickPhotoButton(event)" 
					  skinClass="components.PickaPhotoButtonDarkBorder"/>
			<s:VGroup paddingLeft="5">
				
				<s:Label text="Press Pick button again" fontSize="14" color="#ffffff"/>
				<s:Label text="to add more photos" fontSize="14" color="#ffffff"/>
				<s:Label text="to batch upload" fontSize="14" color="#ffffff"/>
			</s:VGroup>
			<!--<s:Button id="ChooseSetButton" 
			click="onChooseSet()"
			skinClass="components.ChooseSetButtonSkin"/>-->
			
			<s:Button id="PrivacySettingsButton"
					  click="onClickPrivacySettingsButton(event)"
					  skinClass="components.privacySettingsButtonBlackBorder"/>
			<s:VGroup paddingLeft="5">
				<s:Label text="Title: {_title}" maxWidth="180" fontSize="14" color="#ffffff"/>
				<s:Label text="Desc: {_description}" maxWidth="180" fontSize="14" color="#ffffff"/>
				<s:Label text="Tags: {_tags}" fontSize="14" maxWidth="180" color="#ffffff"/>
			</s:VGroup>
			<s:Button click="onClickUploadListButton()" 
					  skinClass="components.UploadButtonBlackBorder"/>
			<s:VGroup paddingLeft="5">
				<s:Label text="Removing a photo from the" maxWidth="180" fontSize="14" color="#ffffff"/>
				<s:Label text="upload list will not delete" maxWidth="180" fontSize="14" color="#ffffff"/>
				<s:Label text="it from the gallery / memory" fontSize="14" maxWidth="180" color="#ffffff"/>
			</s:VGroup>
			<!--<debug:DebugTextArea width="200" height="200"/>-->
		</s:VGroup>
		
		<s:List id="photoList" width="210" height="720" dataProvider="{_batchUploadAC}"  useVirtualLayout="false"
				itemRenderer="ItemRenderers.BatchUploadItemRenderer" contentBackgroundColor="#58595b">
			<s:layout >
				<s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" gap="5"/>
			</s:layout>
		</s:List>
		
	</s:HGroup>
	
	
</s:View>
