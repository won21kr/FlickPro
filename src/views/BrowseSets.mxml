<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		viewActivate="viewActivateHandler(event)" xmlns:components="components.*" xmlns:styles="styles.*">
	
	<!--
	<s:actionContent>
		<s:Button label="Create Set" click="navigator.pushView(CreateSetView)"/>
		<s:Button label="Delete Set" click="navigator.pushView(DeleteSetView)"/>
	</s:actionContent>
	-->

	<fx:Declarations>
		<styles:GraphicsLib id="graphicsLib"/>
	</fx:Declarations>
	
	<s:states>
			<s:State name="loadingState"/>
			<s:State name="errorState"/>
			<s:State name="completeState"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import VOs.DataObject;
			import VOs.SetVO;
			
			import com.adobe.webapis.flickr.FlickrError;
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			
			import components.PopUpQA;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.core.FlexGlobals;
			import mx.utils.ObjectUtil;
			
			import spark.components.ButtonBarButton;
			import spark.events.ViewNavigatorEvent;
			
			import statics.IconFactory;
			import statics.NSID;
			import statics.Service;
			import statics.ViewTypes;
			
			[Bindable]public var forCompiler:BrowseSets;
			
			[Bindable]
			private var _listHeight:int = FlexGlobals.topLevelApplication.stage.stageHeight - 130; 
			[Bindable]
			private var _headerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth;
			[Bindable]
			private var _service:FlickrService;
			[Bindable]
			private var _setsData:ArrayCollection;
			[Bindable]
			private var _setVOs:ArrayCollection = new ArrayCollection();
			
			private var _setVOsByTime:ArrayCollection = new ArrayCollection();
			private var _setVOsByAZ:ArrayCollection = new ArrayCollection();
			
			Security.loadPolicyFile("http://farm1.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm2.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm3.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm4.static.flickr.com/crossdomain.xml");
			
			private function viewActivateHandler(event:ViewNavigatorEvent):void{
				_service = Service.getService();
				if(_setVOs.length<1){
					getSetList();
				}
			}
			
			private function onClickTryAgain():void{
				getSetList();
			}
			
			private function getSetList(event:MouseEvent=null):void{
					currentState = "loadingState";
					if(!_service)_service = Service.getService();
					
					//trace("BrowseSets: NSID.getNSIS()) "+NSID.getNSID());
					//trace("BrowseSets: _service.token() "+_service.token);
					//trace("data: "+data+" _service: "+_service+" nsid: "+NSID.getNSID());
					var id:String = NSID.getNSID();
					//trace("BrowseSets: id: "+id);
					_service.photosets.getList(id);
					
					/*
					_service.addEventListener(FlickrError.INSUFFICIENT_PERMISSIONS, onError);
					_service.addEventListener(FlickrError.FORMAT_NOT_FOUND,onError);
					_service.addEventListener(FlickrError.INVALID_API_KEY,onError);
					_service.addEventListener(FlickrError.INVALID_SIGNATURE,onError);
					_service.addEventListener(FlickrError.INVALID_SOAP_ENVELOPE,onError);
					_service.addEventListener(FlickrError.INVALID_XML_RPC_CALL,onError);
					_service.addEventListener(FlickrError.METHOD_NOT_FOUND,onError);
					_service.addEventListener(FlickrError.MISSING_SIGNATURE, onError);
					_service.addEventListener(FlickrError.SERVICE_CURRENTLY_UNAVAILABLE, onError);
					*/
					_service.addEventListener(FlickrResultEvent.PHOTOSETS_GET_LIST, handleSetList); 
					
			} 
			
			private function onError(event:FlickrError):void{
				trace(event.errorMessage);
				currentState = "errorState";
			}
				
			private function handleSetList(event:FlickrResultEvent):void{ 
				
				//trace("BrowseSets: handleSetList: e.data.photoSets: "+event.data.photoSets);
				if(event.success){
					//trace("BrowseSets: success");
					var setData:Array = event.data.photoSets as Array; 
					_setVOs = new ArrayCollection(new Array);
					
					for(var i:uint = 0; i < setData.length; i ++){ 
						//trace("i:"+i);
						var vo:SetVO = new SetVO();
						vo.id = setData[i].id;
						vo.title = setData[i].title;
						vo.description = setData[i].description;
						vo.service = _service;
						_setVOs.addItem(vo);
					}
					//trace("BrowseSets: _setVOs.length "+_setVOs.length);
					
					//save sorted by time
					for each(var setVO:Object in _setVOs){
						_setVOsByTime.addItem(setVO);
					}
					
					//save sorted by AZ
					var sort:Sort = new Sort();
					sort.fields = [new SortField("title")]
					_setVOs.sort = sort;
					_setVOs.refresh();
					
					for each(var item:Object in _setVOs){
						_setVOsByAZ.addItem(item);
					}
					
					//init as sorted by time
					_setVOs = _setVOsByTime;
					_setVOs.refresh();
					
					currentState = "completeState";
					_service.removeEventListener(FlickrResultEvent.PHOTOSETS_GET_LIST, handleSetList);
				
				}else{
					
					currentState = "errorState";
				
				}
			} 
			
			private function onClickList():void{
				trace("id" +setList.selectedItem.id);
				var dataObject:DataObject = new DataObject();
				dataObject.selectedSet = setList.selectedItem;
				dataObject.viewType = ViewTypes.SET;
				navigator.pushView(MultiplePhotosView,dataObject);
			}
						
			private function sortAlphabetically():void
			{	
				_setVOs = _setVOsByAZ;
				_setVOs.refresh();
			}
			
			private function sortByTime():void
			{
				_setVOs = _setVOsByTime;
				_setVOs.refresh();	
			}
			
			private function addSet():void
			{
				navigator.pushView(CreateSetView);
			}
			
			private function removeSet():void
			{
				navigator.pushView(DeleteSetView);
			}
			
			private function question():void
			{
				// TODO Auto Generated method stub
				var popup:PopUpQA = new PopUpQA();
				popup.show();
				
			}
			
		]]>
	</fx:Script>
	
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~State~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" verticalAlign="middle" horizontalAlign="center" includeIn="loadingState">
		<s:BusyIndicator scaleX="3" scaleY="3" symbolColor="white"/>
		<s:Label text="Loading"/>
		<s:Label text="set list"/>
	</s:VGroup>
	
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~errorState~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" includeIn="errorState">
		<s:Label text="Error loading list"/>
		<s:Button label="Try again" click="onClickTryAgain()"/>
	</s:VGroup>
	
	<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~completeState~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
	
	<s:VGroup width="100%" height="100%"
			  includeIn="completeState,loadingState" gap="0">

		<components:BreadCrumbHeader firstText="Your Sets"/>
		
		<components:ButtonBarHeader includeIn="completeState"
			handlers="{new ArrayCollection([
				sortAlphabetically,
				sortByTime,
				addSet,
				removeSet,
				question   ])}"
			
			icons='{new ArrayCollection([	
				IconFactory.SORT_BY_ALPHA,
				IconFactory.SORT_BY_TIME,
				IconFactory.ADD_ICON,
				IconFactory.REMOVE_ICON,
				IconFactory.QUESTION_ICON   ])}'/>
		
	<s:List id="setList" height="100%" width="100%"
			change="onClickList()" 
			dataProvider="{_setVOs}"
			contentBackgroundAlpha="0"
			includeIn="completeState">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer alternatingItemColors="{[0x333333,0x444444]}" color="#ffffff" downColor="#3fa9f5" labelField="title" decorator="@Embed('assets/images/buttonIcons40x40/plusLP.png')"/>
			</fx:Component>
		</s:itemRenderer>

	</s:List>
	</s:VGroup>
	
</s:View>