<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:styles="styles.*"
		xmlns:components="components.*"		
		creationComplete="creationCompleteHandler(event)" >
	<fx:Script>
		<![CDATA[
			import factories.IconFactory;
		]]>
	</fx:Script>
	<fx:Declarations>
		<styles:GraphicsLib id="graphicsLib"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="startState"/>
		<s:State name="waitState"/>
		<s:State name="resultState"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import VOs.SetVO;
			
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			import queries.PhotoIDQuery;
			
			import spark.filters.DropShadowFilter;
			import spark.transitions.SlideViewTransition;
			
			import statics.Service;
			
			import views.BrowseSets;
			
			[Bindable]private var _textInputWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 80;
			
			public var forCompiler:SingleSetAddMeta;
			
			private var _newTitle:String = "";
			private var _newDescription:String = "";
			[Bindable]private var _resultTitle:String = "";
			[Bindable]private var _resultDescription:String = "";
			
			private var _service:FlickrService;
			
			[Bindable]private var _newSetTitle:String = "";
			
			[Bindable]
			private var _headerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth;
			
			[Bindable] private var _setVO:SetVO;
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				currentState="startState";

				_setVO = data as SetVO;
				titleTextInput.text = _setVO.title;
				descriptionTextInput.text = _setVO.description;
				
				_service = Service.getService();
				
				this.addEventListener( TransformGestureEvent.GESTURE_SWIPE, handleSwipe );
				
			}
			
			/*
			* input from textinputs
			*/
			
			private function onNewTitle(event:Event):void{
				_newTitle = event.currentTarget.text;
			}
			
			private function onNewDescription(event:Event):void{
				_newDescription = event.currentTarget.text;
			}
			
			/*
			* Save edit button clicked
			*/
			
			private function onClickSaveEdit(event:Event):void{
				
				if(_newTitle != ""){
					currentState = "waitState";
					_service.addEventListener(FlickrResultEvent.PHOTOSETS_EDIT_META ,onEditMetaResult);
					_service.photosets.editMeta(_setVO.id,_newTitle,_newDescription);
				}
			}
			
			/*
			* handle response from Flickr
			*/
			
			protected function onEditMetaResult(event:Event):void
			{
				currentState = "resultState";
				_resultTitle = _newTitle;
				_resultDescription = _newDescription;
				_setVO.title = _newTitle;
				_setVO.description = _newDescription;
			}
			
			override public function createReturnObject():Object
			{
				
				return _setVO;
			}

			/*
			* handle navigation events
			*/
			
			private function handleSwipe(event:TransformGestureEvent):void
			{
				if (event.offsetX == 1 ) 
				{
					slideRight();	
				}
			}
			
			private function onClickYourSetsBreadCrumb():void
			{
				slideRight();
			}
			
			private function onClickCancel():void{
				var rightSlide:SlideViewTransition = new SlideViewTransition();
				rightSlide.direction = "right";	
				navigator.popView(rightSlide);
			}
			
			private function slideRight():void{
				var rightSlide:SlideViewTransition = new SlideViewTransition();
				rightSlide.direction = "right";					
				navigator.pushView(BrowseSets,null,null,rightSlide);
			}
			
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" gap="0">
		
		<components:BreadCrumbHeader firstText="Your Sets" firstTextClickHandler="onClickYourSetsBreadCrumb"
									 imageSource="{IconFactory.getIcon(IconFactory.EDIT_ICON)}"
									 secondText="Edit Set Details"/>
		
		<s:VGroup gap="30" horizontalCenter="0" paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
			
			<s:TextArea contentBackgroundAlpha="0" borderVisible="false" editable="false" selectable="false"
						styleName="bodyText" width="100%" height="100" includeIn="startState">
				<s:text>This edits your set title. You image titles are not edited.</s:text>
			</s:TextArea>
			
			<s:VGroup height="100" includeIn="waitState" paddingLeft="20" verticalAlign="middle" verticalCenter="0">
				<s:BusyIndicator scaleX="2" scaleY="2" symbolColor="white"/>
			</s:VGroup>
			
			<s:VGroup height="100" includeIn="resultState" paddingLeft="20" verticalAlign="middle" verticalCenter="0">
				<s:Label text="Your set has been edited:" color="#ffffff" fontWeight="bold" fontSize="20"/>
				<s:Label text="{_resultTitle}" color="#ffffff" fontWeight="bold" fontSize="20"/>
				<s:Label text="{_resultDescription}" color="#ffffff" fontWeight="bold" fontSize="20"/>
			</s:VGroup>
			
			<s:SkinnableContainer skinClass="skins.BlueRectangleWithRoundCornersSkin" contentBackgroundAlpha="0" width="100%">
				<s:VGroup paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20" gap="50">				
					<s:VGroup>
						<s:Label text="Title" styleName="headerTextGrey" filters="{[graphicsLib.getDropShadowFilterWhite()]}"/>
						<s:TextInput id="titleTextInput" width="{_textInputWidth}" change="onNewTitle(event)" contentBackgroundAlpha="1" contentBackgroundColor="#ffffff"/>
					</s:VGroup>
					
					<s:VGroup>
						<s:Label text="Description" styleName="headerTextGrey" filters="{[graphicsLib.getDropShadowFilterWhite()]}"/>
						<s:TextInput id="descriptionTextInput" width="{_textInputWidth}" change="onNewDescription(event)" contentBackgroundAlpha="1" contentBackgroundColor="#ffffff"/>
					</s:VGroup>
					
					<s:HGroup gap="20">		
						<s:Button label="Save edit" click="onClickSaveEdit(event)" skinClass="skins.SquareButtonSkin"/>
						<s:Button label="Cancel" click="onClickCancel()" skinClass="skins.SquareButtonSkin"/>
					</s:HGroup>
				</s:VGroup>
				
			</s:SkinnableContainer>
			
		</s:VGroup>		
		
	</s:VGroup>
	
</s:View>