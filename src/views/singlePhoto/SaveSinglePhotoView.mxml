<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="init()" xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			import statics.IconFactory;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="requestSizesState"/>
		<s:State name="displaySizesState"/>
		<s:State name="loadingState"/>
		<s:State name="errorState"/>
		<s:State name="savingState"/>
		<s:State name="completeState"/>
	</s:states>

	<fx:Script>
		<![CDATA[
			import spark.transitions.SlideViewTransition;
			import mx.core.FlexGlobals;
			import VOs.PhotoVO;
			import VOs.SizeVO;
			
			import com.adobe.images.JPGEncoder;
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.IdUtils.UniqueStringUtil;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import mx.collections.ArrayCollection;
			
			import statics.Service;
			
			public var forCompiler:SaveSinglePhotoView;
			
			public var image:Bitmap;
			private var _service:FlickrService;
			private var _photoVO:PhotoVO;
			public var tags:String;
			public var description:String;
			public var largeImageString:String;
			public var setTitle:String;
			public var setId:String;
			
			[Bindable]
			private var _fileName:String;
			[Bindable]
			private var _path:String;
			
			[Bindable]
			private var _containerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*2;
			[Bindable]
			private var _contentWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*4;
			private var _imageURL:String;
			
			[Bindable]private var _sizesAC:ArrayCollection = new ArrayCollection();
			
			private function init():void{
				currentState = "requestSizesState";
				_service = Service.getService();
				this._photoVO = data as PhotoVO;
				
				//EventCentral.getInstance().addEventListener(CustomDataEvent.SIZE_SELECTED,onSizeSelected);
			
				requestSizes();
			}
			
			private function requestSizes():void{
				_service.addEventListener(FlickrResultEvent.PHOTOS_GET_SIZES,onGetSizes);
				_service.photos.getSizes(_photoVO.id);
			}
			
			protected function onGetSizes(event:FlickrResultEvent):void
			{
				_sizesAC.removeAll();
				
				var a:Array = event.data.photoSizes as Array;
				for (var i:int = 0; i < a.length; i++) 
				{
					var vo:SizeVO = new SizeVO();
					vo.height = a[i].height;
					vo.label = a[i].label;
					vo.source = a[i].source;
					vo.url = a[i].url;
					vo.width = a[i].width;
					_sizesAC.addItem(vo);	
				}
				
				currentState = "displaySizesState";
			}
			
		
			
			private function onError(event:Event):void{
				currentState = "errorState";
			}
			
			

			/*
			s	small square 75x75
			t	thumbnail, 100 on longest side
			m	small, 240 on longest side
			-	medium, 500 on longest side
			z	medium 640, 640 on longest side
			b	large, 1024 on longest side*
				o	original image, either a jpg, gif or png, depending on source format
			*/	
			
			private function onClickSizeList(event:Event):void
			{
				var sizeSuffix:String = "";
				
				var imageURL:String = 	'http://static.flickr.com/' + 
				_photoVO.photo.server + '/' + 
				_photoVO.photo.id + '_' +
				_photoVO.photo.secret + '_'+sizeSuffix +'.jpg';
				
				//var sizeSelection:String = event.sizeVO.label;
				
				switch(sizeList.selectedItem.label){
					case "Square":
						sizeSuffix = "s";
						break;
					case "Thumbnail":
						sizeSuffix = "t";
						break;
					case "Small":
						sizeSuffix = "m";
						break;
					case "Medium":
						sizeSuffix = "";
						break;
					case "Medium 640":
						sizeSuffix = "z";
						break;
					case "Large":
						sizeSuffix = "b";
						break;
					case "Original":
						sizeSuffix = "o";
						break;
				}
				
				load(imageURL);
			}
			
			private function load(url:String):void{
				
				var imageURL:String = url;
				
				currentState = "loadingState";
				
				trace("url: "+_imageURL);
				
				var request:URLRequest = new URLRequest(imageURL);
				var loader:Loader = new Loader();
				//loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgress);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR,onError);
				loader.load(request);
			}
			
			private function onProgress(event:ProgressEvent):void
			{
				trace("onProgressEvent");
				//EventCentral.getInstance().dispatchEvent(new CustomEvent(CustomEvent.INVALIDATE_DISPLAY_LIST));
			}
			
			private function onLoadComplete(event:Event):void{
				trace("onEventComplete");
				var image:Bitmap = event.currentTarget.content;
				
				currentState = "savingState";
				
				prepareForSave(image);
				
				//EventCentral.getInstance().dispatchEvent(new CustomEvent(CustomEvent.INVALIDATE_DISPLAY_LIST));
			}
			
			private function prepareForSave(image:Bitmap):void{
				var bitmapData:BitmapData=new BitmapData(image.width, image.height);
				
				bitmapData.draw(image);  
				
				var jpgEncoder:JPGEncoder = new JPGEncoder(95);
				
				var byteArray:ByteArray = jpgEncoder.encode(bitmapData);             
				
				_fileName = "Fastr/"+UniqueStringUtil.getTimeStamp();
				_fileName += ".jpg";
				
				var file:File = File.documentsDirectory.resolvePath(_fileName);
				_path = file.nativePath;
				
				try{
					trace("try save")
					var fs:FileStream=new FileStream;
					fs.open(file,FileMode.WRITE);
					fs.writeBytes(byteArray,0,byteArray.length);
					fs.close();
					currentState = "completeState";
				}catch(e:Error){
					trace(e.toString());
					trace("save error");
					currentState = "errorState";
				}
			}
			
			private function onClickYourPhotoBreadCrumb():void{
				navigator.popView();
			}
			
			private function onClickCancel():void{
				var rightSlide:SlideViewTransition = new SlideViewTransition();
				rightSlide.direction = "right";	
				navigator.popView(rightSlide);
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" gap="0">
		
		<components:BreadCrumbHeader firstText="Your Photo" firstTextClickHandler="onClickYourPhotoBreadCrumb"
									 imageSource="{IconFactory.getIcon(IconFactory.SAVE_ICON)}"
									 secondText="Save Your Image"/>
	
<!--requestSizesState-->	
		<s:VGroup horizontalCenter="0" verticalCenter="0" 
				  verticalAlign="middle" horizontalAlign="center" width="100%" height="100%" 
				  includeIn="requestSizesState">
			<s:BusyIndicator scaleX="3" scaleY="3" symbolColor="white"/>
			<s:Label text="loading photo size choices" color="#ffffff"/>
		</s:VGroup>
	
<!--displaySizesState-->
	
		<s:VGroup width="100%" height="100%" paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20" includeIn="displaySizesState">
			<s:SkinnableContainer skinClass="skins.GreyBoxRoundCornersSkin" contentBackgroundAlpha="0" width="{_containerWidth}">
				
				<s:VGroup width="100%" paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
					<s:TextArea selectable="false" editable="false" borderVisible="false" contentBackgroundAlpha="0" width="{_contentWidth}" color="#ffffff">
						<s:text>Tap a size to start download to SD Card. Note that Gallery can display news images only after media scanner has run</s:text>
					</s:TextArea>
					<s:List id="sizeList" dataProvider="{_sizesAC}" itemRenderer="ItemRenderers.SizeIconItemRenderer" 
							width="{_contentWidth}" height="300" click="onClickSizeList(event)" borderColor="#222222" borderVisible="true" contentBackgroundColor="#222222">
					</s:List>
					<s:Button label="Cancel" skinClass="skins.SquareButtonSkin" click="onClickCancel()"/>
				</s:VGroup>
			</s:SkinnableContainer>
		</s:VGroup>
	
	
		<!-- loadingState-->
		
		<s:VGroup horizontalCenter="0" verticalCenter="0" verticalAlign="middle" horizontalAlign="center" 
				  includeIn="loadingState,savingState" width="100%" height="100%">
			<s:BusyIndicator scaleX="3" scaleY="3" symbolColor="white" includeIn="loadingState"/>
			<s:Label text.loadingState="downloading..." text.savingState="saving to SD Card" color="#ffffff"/>
		</s:VGroup>	
		
		<!--errorState-->
		<s:VGroup horizontalCenter="0" verticalCenter="0" verticalAlign="middle" horizontalAlign="center"  
				  includeIn="errorState" width="100%" height="100%">
			<s:Label text="Error loading image" color="#ffffff"/>
			<s:Button label="Try again" click="navigator.popView()" skinClass="skins.SquareButtonSkin"/>
		</s:VGroup>
		
		<!--completeState-->	
		<s:VGroup horizontalCenter="0" verticalCenter="0" verticalAlign="middle" horizontalAlign="center"  includeIn="completeState" width="100%" height="100%">
			<s:VGroup>		
				<s:Label text="Image saved to SD Card." color="#ffffff"/>
				<s:Label text="path:" color="#ffffff"/>
				<s:Label text="{_path}" color="#ffffff"/>
				<s:Label text="Filename:" color="#ffffff"/>
				<s:Label text="{_fileName}" color="#ffffff"/>
			</s:VGroup>
			<s:Button label="Back" click="navigator.popView()" skinClass="skins.SquareButtonSkin"/>
		</s:VGroup>
	
	</s:VGroup>
</s:View>