<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:styles="styles.*" 
		xmlns:components="components.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		add="onAdd()"
		viewActivate="viewActivateHandler(event)">
	
	<!-- the states must have same name string value as the corresponding state constants-->
	<s:states>
		<s:State name="NoState"/><!--initial state-->
		<s:State name="LoadingState"/><!--loading image-->
		<s:State name="SetState"/><!-- if we came from a set view-->
		<s:State name="SearchState"/><!--if we came from a search view-->
		<s:State name="StreamState"/><!--if we came from a stream view-->
		<s:State name="RemovedFromSetState"/><!--if we return from a removal from a set-->
	</s:states>
	
	<fx:Declarations>
		<styles:GraphicsLib id="graphicsLib"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import VOs.DataObject;
			import VOs.PhotoVO;
			import VOs.SetVO;
			
			import com.chewtinfoil.utils.StringUtils;
			import com.squidzoo.imageUtils.ImageCache;
			import com.squidzoo.imageUtils.ImageUtils;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import skins.SpeechBubbleSkin;
			
			import spark.components.ButtonBarButton;
			import spark.events.ViewNavigatorEvent;
			import spark.transitions.SlideViewTransition;
			
			import statics.IconFactory;
			import statics.LatestSearchTag;
			import statics.Service;
			import statics.ViewTypes;
			
			import views.BrowseSets;
			import views.MultiplePhotosView;
			
			public var forCompiler:SinglePhotoView;
			//public var moreForCompiler:SpeechBubbleSkin;
			
			[Bindable] private var _containerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*2;
			[Bindable] private var _contentWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth - 20*4;
			
			/* These constants must have same string value as corresponding state */
			public static const REMOVED_FROM_SET_STATE:String = "RemovedFromSetState";
			public static const PHOTO_STREAM_STATE:String = "StreamState";
			public static const SET_STATE:String = "SetState";
			public static const SEARCH_STATE:String = "SearchState";
			public static const LOADING_STATE:String = "LoadingState";
			
			[Bindable]
			private var _headerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth;
			private var _maxImageWidth:int = 420;
			private var _maxImageHeight:int = 450;
			
			private var _previousPhoto:PhotoVO;
			private var _nextPhoto:PhotoVO;
			
			private var _completeState:String = SinglePhotoView.REMOVED_FROM_SET_STATE;
			
			[Bindable]private var _privacySetting:String;
			[Bindable]private var _setTitle:String;
			[Bindable]private var _setId:String;
			[Bindable]private var _title:String = "no title";
			[Bindable]private var _desc:String;
			[Bindable]private var _tags:String = "no tags";
			[Bindable]private var _tagAC:ArrayCollection = new ArrayCollection();
			private var _imgString:String;
			
			private var _isFullScreen:Boolean = false;
			
			[Bindable]private var _image:Bitmap;
			[Bindable]private var _photoVO:PhotoVO;
			private var _orginalBitmapData:BitmapData;
			private var _removedFromSet:Boolean = false;
			
			private var _cache:ImageCache;

			private var _photoImage:Bitmap;
			
			[Bindable] private var _description:String;
			[Bindable] private var _ownerName:String;
			[Bindable] private var _viewHeight:int = FlexGlobals.topLevelApplication.stage.stageHeight - 100;
			
			private var _context:String = "";
			
			
			/*
			* onAdd() handles case where an image was removed from its set in the RemoveFromSetView and that view popped to this one"
			*/
			
			private function onAdd():void{
				if(navigator.poppedViewReturnedObject && 
					navigator.poppedViewReturnedObject.object && 
					navigator.poppedViewReturnedObject.object.removedFromList){
					if(navigator.poppedViewReturnedObject.object.removedFromList == "removed"){
						_removedFromSet = true;
						_completeState = SinglePhotoView.REMOVED_FROM_SET_STATE;
					}
				}
			}
			
			private function viewActivateHandler(event:ViewNavigatorEvent=null):void{
				
				currentState = SinglePhotoView.LOADING_STATE;
				
				_cache = ImageCache.getInstance();
				
				FlexGlobals.topLevelApplication.stage.addEventListener(KeyboardEvent.KEY_DOWN, onBackKeyDown);
				this.addEventListener( TransformGestureEvent.GESTURE_SWIPE, handleSwipe );
				
				/*	Set end state based on context object state property value
					The context object is passed in from either MultiplePhotosView or FullScreenView
				*/
				
				if(navigator.context){
					if(navigator.context.state == SinglePhotoView.SEARCH_STATE){
						_completeState = SinglePhotoView.SEARCH_STATE;
					}else if(navigator.context.state == SinglePhotoView.PHOTO_STREAM_STATE){
						_completeState = SinglePhotoView.PHOTO_STREAM_STATE;
					}else if(navigator.context.state == SinglePhotoView.SET_STATE){
						_completeState = SinglePhotoView.SET_STATE;
					}
				}
								
				if(data){
					parseData();
					
					if(_cache.hasImageData(_imgString)){
						displayImage();
					}else{
						loadImageFromFlickr();
					}
				}else{
					//if no data...
				}
			}
		
			
			/*
			* check of we have already cached image
			*/
			
			private function displayImage():void{
				setCompleteState();
				assignImageToDisplay(changeImageSize(_cache.getImageData(_imgString)));
			}
			
			private function changeImageSize(image:Bitmap):Bitmap{
				_orginalBitmapData = image.bitmapData.clone();
				if(image.width > image.height){
					image = ImageUtils.scaleToTargetWidth(image,_maxImageWidth);
				}else{
					image = ImageUtils.scaleToTargetHeight(image,_maxImageHeight);				
				}
				image = ImageUtils.addBorder(image,10,0xffffff);
				
				return image;
			}
			
			private function assignImageToDisplay(image:Bitmap):void{
				
				photo.source = image;
				if(_description)descArea.insertText(_description);
				if(_title)titleArea.insertText(_title);
			}
			
			private function setCompleteState():void{
				
				currentState = _completeState	
			}
			
			/*
			*if imaged wasn't cached yet, load it
			*/
			
			private function loadImageFromFlickr():void{
				var request:URLRequest = new URLRequest(data.largeImageString);
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onImageLoadComplete);
				loader.load(request);
			}
			
			private function onImageLoadComplete(event:Event):void{
				
				var image:Bitmap = event.currentTarget.content;
				_image = image;
				
				saveInCache(image);
				setCompleteState();
				assignImageToDisplay(changeImageSize(image));
			}	
			
			private function saveInCache(image:Bitmap):void{
				if(_cache.hasImageData(_imgString)==false){
					_cache.putImageData(_imgString,image);
				}
			}

			
			private function parseData():void{
				_photoVO = data as PhotoVO;
				
				if(data.setTitle && (_removedFromSet==false))_completeState = SinglePhotoView.SET_STATE;
				if(data.setTitle)		_setTitle = StringUtils.truncate(data.setTitle,500);
				if(data.setId)			_setId = data.setId;
				_title = StringUtils.truncate(_photoVO.title,30);
				if(data.description) 	_description = StringUtils.truncate(data.description,500);
				if(data.ownerName)		_ownerName = StringUtils.truncate(data.ownerName, 50);
				if(data.tags)			_tagAC = data.tags;
				if(data.privacySetting) _privacySetting = data.privacySetting;
				if(data.previousPhoto)	_previousPhoto = data.previousPhoto;
				if(data.nextPhoto)		_nextPhoto = data.nextPhoto;
				if(data.largeImageString)_imgString = data.largeImageString;
	
			}
			
			
			
			/*
			* Swipe handling
			*/
			
			private function handleSwipe(event:TransformGestureEvent):void
			{
				var contextObj:Object = new Object();
				
				if (event.offsetX == 1 ) 
				{
					if(_previousPhoto){
						var rightSlide:SlideViewTransition = new SlideViewTransition();
						rightSlide.direction = "right";					
						navigator.pushView(SinglePhotoView,_previousPhoto,null,rightSlide);	
					}
				}
				
				if(event.offsetX == -1){
					if(_nextPhoto){
						var leftSlide:SlideViewTransition = new SlideViewTransition();
						leftSlide.direction = "left";
						navigator.pushView(SinglePhotoView,_nextPhoto,null,leftSlide);
					}
				}
			}
			

			
			/*
			* Bread crumb event
			*/
			
			private function onClickSearchResults():void{
				var slideEffect:SlideViewTransition = new SlideViewTransition();
				slideEffect.direction = "right";
				var dataObject:DataObject = new DataObject();
				dataObject.tags = LatestSearchTag.getLatestSearchTag();
				dataObject.viewType = ViewTypes.SEARCH_ALL_PUBLIC_PHOTOS_ON_FLICKR;
				navigator.pushView(MultiplePhotosView,dataObject,null,slideEffect);
			}
			
			private function onClickPhotoStream():void{
				var slideEffect:SlideViewTransition = new SlideViewTransition();
				slideEffect.direction = "right";
				var dataObject:DataObject = new DataObject();
				dataObject.viewType = ViewTypes.PHOTO_STREAM;
				navigator.pushView(MultiplePhotosView,dataObject,null,slideEffect);
			}
			
			private function onClickYourSets():void{
				var slideEffect:SlideViewTransition = new SlideViewTransition();
				slideEffect.direction = "right";
				navigator.pushView(BrowseSets,null,null,slideEffect);
			}
			
			private function onSetTitleClick():void{
				var setVO:SetVO = new SetVO();
				setVO.title = _setTitle;
				setVO.id = _setId;
				setVO.service = Service.getService();
			
				var dataObject:DataObject = new DataObject();
				dataObject.selectedSet = setVO;
				dataObject.viewType = ViewTypes.SET;
				navigator.pushView(MultiplePhotosView,dataObject);
			}
			
			
			private function onFullScreenSelection():void{
				trace("onFullScreenSelection");
				var imageObject:Object = new Object();
				imageObject.image = _orginalBitmapData;
				imageObject.state = _completeState;
				navigator.pushView(FullScreenView,_photoVO,imageObject);
			}
			
			private function onDownloadOriginal(event:MouseEvent=null):void
			{
				//trace(_imgString);
				//var obj:Object = new Object();
				//obj.imgString = _imgString;
				navigator.pushView(SaveSinglePhotoView,_photoVO);
			}
			
			private function removeFromSet():void{
				if(_setId){
					var dataObject:Object = new Object();
					dataObject.setId = _setId;
					dataObject.setTitle = _setTitle;
					dataObject.photoId = _photoVO.id;
					navigator.pushView(views.singlePhoto.RemoveFromSetView,dataObject);
				}
			}
			
			private function addToSet():void
			{
				var dataObject:Object = new Object();
				dataObject.photoId = _photoVO.id;
				navigator.pushView(AddToSetView,dataObject);				
			}
			
			protected function onBackKeyDown(event:KeyboardEvent):void
			{
				// TODO Auto-generated method stub
				trace("spv onBackKeyDown");
			}
			
			private function editDetails():void
			{
				
				// TODO Auto Generated method stub
				navigator.pushView(EditPhotoView,_photoVO);
			}
			
		
			
		]]>
	</fx:Script>
	
	<!--Loadingstate-->
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" horizontalAlign="center" verticalAlign="middle" 
			  includeIn="LoadingState">
		<s:BusyIndicator scaleX="3" scaleY="3" symbolColor="white"/>
	</s:VGroup>
	
	
	<!--whole view below actionbar-->
	<s:VGroup width="100%" height="100%" gap="0">
	
		<!--headers-->	
		
		<!--completeStateSet-->
			<components:BreadCrumbHeader includeIn="SetState"	
				firstText="Your Sets" 		firstTextClickHandler="onClickYourSets" 
				secondText="{_setTitle}" 	secondTextClickHandler="onSetTitleClick" />	
			
			<components:ButtonBarHeader includeIn="SetState"
				handlers="{new ArrayCollection([
				onDownloadOriginal, editDetails, addToSet, removeFromSet, onFullScreenSelection   ])}"
				
				icons="{new ArrayCollection([	
				IconFactory.SAVE_ICON, IconFactory.EDIT_ICON, IconFactory.ADD_ICON,
				IconFactory.REMOVE_ICON, IconFactory.FULL_SCREEN_ICON   ])}"/>
		
		<!--completeStateSearch-->
		<components:BreadCrumbHeader includeIn="SearchState" firstText="Your Search Result" firstTextClickHandler="onClickSearchResults"
								 								secondText="Photo"/>	
	
		<components:ButtonBarHeader includeIn="SearchState" handlers="{new ArrayCollection([
									onFullScreenSelection   ])}"
									
									icons="{new ArrayCollection([	
									IconFactory.FULL_SCREEN_ICON   ])}"/>
	
		<!--completeStateStream-->
		<components:BreadCrumbHeader includeIn="StreamState" 	
									 firstText="Your PhotoStream" firstTextClickHandler="onClickPhotoStream"
									 secondText="Photo" />	
		
		<components:ButtonBarHeader includeIn="StreamState" 
									handlers="{new ArrayCollection([
									onDownloadOriginal, editDetails, addToSet, onFullScreenSelection   ])}"
									
									icons="{new ArrayCollection([	
									IconFactory.SAVE_ICON, IconFactory.EDIT_ICON, IconFactory.ADD_ICON,
									IconFactory.FULL_SCREEN_ICON   ])}"/>	
		
		<!--completeStateRemovedFromSet-->
		<components:BreadCrumbHeader includeIn="RemovedFromSetState" 
									 firstText="Photostream" 
									 secondText="Photo"/>
		
		<components:ButtonBarHeader includeIn="RemovedFromSetState" 
									handlers="{new ArrayCollection([
									onDownloadOriginal, editDetails, addToSet, onFullScreenSelection   ])}"
									
									icons="{new ArrayCollection([	
									IconFactory.SAVE_ICON, IconFactory.EDIT_ICON, IconFactory.ADD_ICON,
									IconFactory.FULL_SCREEN_ICON   ])}"/>	
		<!--end headers-->
	
	<s:Scroller y="100" width="100%" height="100%" excludeFrom="LoadingState,NoState">
		
		<s:Group>
			
			<s:VGroup paddingTop="10" paddingLeft="20" paddingRight="20" paddingBottom="20" horizontalCenter="0" horizontalAlign="center">
				
				<s:Image id="photo" smooth="true"/>
				
				<s:SkinnableContainer width="{_containerWidth}" skinClass="skins.SpeechBubbleSkin">	
					<s:VGroup gap="20">
						<s:VGroup>
							<s:Label text="Title" color="#ffffff" fontSize="22"/>
							<s:TextArea selectable="false" editable="false" borderVisible="false" contentBackgroundAlpha="0" 
										id="titleArea" width="{_contentWidth}" color="#222222"/>
						</s:VGroup>
						<s:VGroup>						
							<s:Label text="Description" color="#ffffff" fontSize="22"/>
							<s:TextArea selectable="false" editable="false" borderVisible="false" contentBackgroundAlpha="0" 
										id="descArea" width="{_contentWidth}" color="#222222"/>
						</s:VGroup>
						<s:VGroup>						
							<s:Label text="Visibility" color="#ffffff" fontSize="22"/>
							<s:Label id="privacySettingLabel" color="#222222" text="{_privacySetting}"/>	
						</s:VGroup>
						<s:VGroup>						
							<s:Label text="Owner name" color="#ffffff" fontSize="22"/>
							<s:Label id="ownerNameLabel" color="#222222" text="{_ownerName}"/>	
						</s:VGroup>
						<s:VGroup>
							
							<s:Label text="Tags" color="#ffffff" fontSize="22"/>
							<s:DataGroup width="{_contentWidth}" dataProvider="{_tagAC}" itemRenderer="ItemRenderers.TagItemRenderer" contentBackgroundAlpha="0">
								<s:layout>
									<s:TileLayout requestedColumnCount="1" />
								</s:layout>
								
							</s:DataGroup>		 
						</s:VGroup> 
					</s:VGroup>
				</s:SkinnableContainer>
				
			</s:VGroup>
				
		</s:Group>
			
	</s:Scroller>
	
	</s:VGroup>
	
</s:View>