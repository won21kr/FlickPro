<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		add="onAdd()"
		creationComplete="init(event)" xmlns:components="components.*" xmlns:styles="styles.*" xmlns:ItemRenderers="ItemRenderers.*">
	
	<fx:Declarations>
		<styles:GraphicsLib id="graphicsLib"/>
		<ItemRenderers:PhotoListVerticalIR id="vertIR"/>
		<s:VerticalLayout id="verticalLayout" gap="0" paddingTop="0"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="loadingState"/>
		<s:State name="errorState"/>
		<s:State name="completeStateSet"/>
		<s:State name="completeStateSearch"/>
		<s:State name="completeStateStream"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import Interfaces.IPhotoQuery;
			
			import ItemRenderers.PhotoListIGridItemRenderer;
			
			import VOs.DataObject;
			import VOs.SetVO;
			
			import com.adobe.webapis.flickr.FlickrService;
			import com.chewtinfoil.utils.StringUtils;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			import com.squidzoo.eventSystem.events.CustomEvent;
			
			import components.popups.HelpWindow;
			
			import factories.HelpFactory;
			import factories.IconFactory;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.utils.object_proxy;
			
			import queries.PhotoQuery;
			
			import spark.components.ButtonBarButton;
			import spark.layouts.VerticalLayout;
			import spark.layouts.supportClasses.LayoutBase;
			import spark.transitions.SlideViewTransition;
			
			import statics.ViewTypes;
			
			import views.singlePhoto.SinglePhotoView;
			import views.singleSet.SingleSetAddMeta;
			import views.singleSet.SingleSetDeleteSet;
			
			[Bindable]
			private var _headerWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth;
			[Bindable]
			private var _listHeight:int = FlexGlobals.topLevelApplication.stage.stageHeight - 130; 
			[Bindable]
			private var _halfStageWidth:int = FlexGlobals.topLevelApplication.stage.stageWidth/2;  
			[Bindable]
			private var _setTitle:String;
			[Bindable]
			private var _photoVOs:ArrayCollection = new ArrayCollection();			
			private var _photoQuery:IPhotoQuery;
			private var _service:FlickrService;
			private var _viewType:String;
			private var _completeStateType:String;
			[Bindable]private var _setVO:SetVO;
			private var _pageIndex:int = 1;
	
			
			
			Security.loadPolicyFile("http://farm1.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm2.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm3.static.flickr.com/crossdomain.xml");  
			Security.loadPolicyFile("http://farm4.static.flickr.com/crossdomain.xml");
			
			private function onAdd():void{
				if(navigator.poppedViewReturnedObject && 
					navigator.poppedViewReturnedObject.object && 
					navigator.poppedViewReturnedObject.object.title){
					{
						_setVO = navigator.poppedViewReturnedObject.object as SetVO;
					}
				}
			}
			
			private function init(event:FlexEvent=null):void{
				
				if(data){
					if(data.pageIndex>0){
						_pageIndex = data.pageIndex;
					}
				}
				
				photoList = new List();
				
				currentState = "loadingState";						
				
				EventCentral.getInstance().addEventListener(CustomDataEvent.PHOTOS_RETRIEVED_FROM_FLICKR,onPhotosRetrieved);
				EventCentral.getInstance().addEventListener(CustomEvent.ERROR_RETRIEVING_PHOTOS,onError);
				EventCentral.getInstance().addEventListener(CustomEvent.INVALIDATE_DISPLAY_LIST,onInvalidateDisplayList);
				EventCentral.getInstance().addEventListener(CustomDataEvent.IMAGE_IN_LIST_CLICKED,onImageInListClicked);
				
				_viewType = (data as DataObject).viewType;
				
				var type:String = "";
				
				_photoQuery = new PhotoQuery();
				
				switch(_viewType){		
					
					case ViewTypes.PHOTO_STREAM :
					_photoQuery.setParams(data as DataObject);
					type = ViewTypes.PHOTO_STREAM;
					_completeStateType = "completeStateStream";
					break;
					
					case ViewTypes.SET :
					_setTitle = StringUtils.truncate((data as DataObject).selectedSet.title,30);
					_photoQuery.setParams(data as DataObject);
					_setVO = (data as DataObject).selectedSet;
					type = ViewTypes.SET;
					_completeStateType = "completeStateSet";
					break;
					
					case ViewTypes.SEARCH_ALL_PUBLIC_PHOTOS_ON_FLICKR :
					_photoQuery.setParams(data as DataObject);
					type = ViewTypes.SEARCH_ALL_PUBLIC_PHOTOS_ON_FLICKR;
					_completeStateType = "completeStateSearch";
					break;
					
					case ViewTypes.SEARCH_ONLY_OWN_PHOTOS :
					_photoQuery.setParams(data as DataObject);
					type = ViewTypes.SEARCH_ONLY_OWN_PHOTOS;
					_completeStateType = "completeStateSearch";
					break;
				}
				_photoQuery.execute(type);
			}
			
			private function onPhotosRetrieved(event:CustomDataEvent):void
			{
				trace("mpv onPhotosRetrieved");
				_photoVOs.removeAll();
				currentState  = _completeStateType;
				trace("psv onPhotosRetrieved");
				_photoVOs = event.list;
				
				EventCentral.getInstance().removeEventListener(CustomDataEvent.PHOTOS_RETRIEVED_FROM_FLICKR,onPhotosRetrieved);
			}
			
			private function onListClick(event:MouseEvent):void{
				if(photoList.selectedItem){
					
					var contextObject:Object = new Object();
					
					switch(currentState){
						case "completeStateSet":
							contextObject.state = SinglePhotoView.SET_STATE;
							navigator.pushView(SinglePhotoView, photoList.selectedItem,contextObject);
							break;
						case "completeStateSearch":
							contextObject.state = SinglePhotoView.SEARCH_STATE;
							navigator.pushView(SinglePhotoView, photoList.selectedItem,contextObject);
							break;
						case "completeStateStream":
							contextObject.state = SinglePhotoView.PHOTO_STREAM_STATE;
							navigator.pushView(SinglePhotoView,photoList.selectedItem,contextObject);
							break;
					}
				}
			}
			
			private function onError(event:Event):void{
				currentState = "errorState";				
			}
			
			/**
			 * resets the itemRenderer property temporarily and then restores it to trigger a redraw.
			 */
			
			private function onInvalidateDisplayList(event:Event):void
			{	
				/*
				var _itemRenderer:IFactory = photoList.itemRenderer;
				photoList.itemRenderer = null;
				photoList.itemRenderer = _itemRenderer;
				*/
			}
			
			private function onClickYourSets():void{
				var slideEffect:SlideViewTransition = new SlideViewTransition();
				slideEffect.direction = "right";
				navigator.pushView(BrowseSets,null,null,slideEffect);
			}
			
			protected function onImageInListClicked(event:CustomDataEvent):void
			{
				// TODO Auto-generated method stub
				//trace("mpv onImageInListClicked: "+event.photoVO.title);
				//navigator.pushView(SinglePhotoView,event.photoVO);
			}

			/*
			* ButtonBar handlers
			*/
			
			private function editSet():void
			{
				navigator.pushView(SingleSetAddMeta,_setVO);
			}
			
			private function setViewByLine():void{
				photoList.layout = verticalLayout;
				photoList.itemRenderer = new ClassFactory(PhotoListVerticalIR);
			}
			
			private function setViewByGrid():void{
				photoList.layout = tileLayout;
				photoList.itemRenderer = new ClassFactory(PhotoListIGridItemRenderer);
			}
			
			private function deleteSet():void
			{
				navigator.pushView(SingleSetDeleteSet,_setVO);
			}
			
			
			
			/*
			* prev/next
			*/
			
			private function onClickPrevious():void{
				
				if(_pageIndex>1){
					
					/*
					var dataObject:DataObject = (data as DataObject);
					dataObject.selectedSet = photoList.selectedItem;
					
					if(_viewType == ViewTypes.SET){
						
						dataObject.viewType = ViewTypes.SET;
					
					}else if(_viewType == ViewTypes.SEARCH_ALL_PUBLIC_PHOTOS_ON_FLICKR){
						
						dataObject.viewType = ViewTypes.SEARCH_ALL_PUBLIC_PHOTOS_ON_FLICKR;
					
					}else if(_viewType == ViewTypes.PHOTO_STREAM){
						
						dataObject.viewType == ViewTypes.PHOTO_STREAM;
					
					}
					*/
					this.data.pageIndex--; 
					
					var slideEffect:SlideViewTransition = new SlideViewTransition();
					slideEffect.direction = "right";
					
					
					navigator.pushView(MultiplePhotosView,this.data,null,slideEffect);
				}
			}
			
			private function onClickNext():void{
				this.data.pageIndex++;
				
				navigator.pushView(MultiplePhotosView,this.data);
			}
			
			private function questionStateSet():void{
				var helpWindow:HelpWindow = new HelpWindow();
				helpWindow.content = HelpFactory.getHelpContent(HelpFactory.VIEW_SINGLE_SET);
				helpWindow.show();
			}
			
			private function questionStateStream():void{
				var helpWindow:HelpWindow = new HelpWindow();
				helpWindow.content = HelpFactory.getHelpContent(HelpFactory.VIEW_PHOTOSTREAM);
				helpWindow.show();
			}
			
			private function questionStateSearch():void{
				var helpWindow:HelpWindow = new HelpWindow();
				helpWindow.content = HelpFactory.getHelpContent(HelpFactory.VIEW_PHOTOSTREAM);
				helpWindow.show();
			}
			
		]]>
	</fx:Script>
	
	<!--errorState-->
	
	<s:VGroup horizontalCenter="0" verticalCenter="0"
			  includeIn="errorState">
		<s:Label text="Error loading list"/>
		<s:Button label="Try again" click="init()" skinClass="components.TryAgainButtonSkin2"/>
	</s:VGroup>
	
	<!--loadingState-->
	
	<s:VGroup horizontalCenter="0" verticalCenter="0" includeIn="loadingState">
		<s:BusyIndicator scaleX="3" scaleY="3" symbolColor="white"/>
		<s:Label text="Loading..."/>
	</s:VGroup>
	
	<!--completeState-->
	
	<s:VGroup width="100%" height="100%" gap="0" includeIn="completeStateSet,completeStateStream, completeStateSearch">
		
		<!--Headers-->
		<!--stateSet-->
		<components:BreadCrumbHeader includeIn="completeStateSet" firstText="Your Sets" firstTextClickHandler="onClickYourSets" 
									 secondText="{_setTitle}" />
		
		<components:ButtonBarHeader includeIn="completeStateSet"
									handlers="{new ArrayCollection([
									setViewByLine,
									setViewByGrid,
									editSet,
									deleteSet,
									questionStateSet   ])}"
									
									icons='{new ArrayCollection([	
									IconFactory.VERT_LIST_ICON,
									IconFactory.GRID_ICON,
									IconFactory.EDIT_ICON,
									IconFactory.REMOVE_ICON,
									IconFactory.QUESTION_ICON   ])}'/>
		<!--end stateSet-->
		
		<components:BreadCrumbHeader includeIn="completeStateSearch" firstText="Your Search Result"/>
		
		<components:ButtonBarHeader includeIn="completeStateSearch"
									handlers="{new ArrayCollection([
									setViewByLine,
									setViewByGrid,
									onClickNext,
									onClickPrevious,
									questionStateSearch
									])}"
									
									icons='{new ArrayCollection([	
									IconFactory.VERT_LIST_ICON,
									IconFactory.GRID_ICON,
									IconFactory.ARROW_DOWN_ICON,
									IconFactory.ARROW_UP_ICON,
									IconFactory.QUESTION_ICON
									])}'/>
		
		<!--StreamState-->
		<!--stateSet-->
		<components:BreadCrumbHeader includeIn="completeStateStream" firstText="Your PhotoStream" />
		
		<components:ButtonBarHeader includeIn="completeStateStream"
									handlers="{new ArrayCollection([
										setViewByLine,
										setViewByGrid,
										onClickNext,
										onClickPrevious,
										questionStateStream
									])}"
									
									icons='{new ArrayCollection([	
										IconFactory.VERT_LIST_ICON,
										IconFactory.GRID_ICON,
										IconFactory.ARROW_DOWN_ICON,
										IconFactory.ARROW_UP_ICON,
										IconFactory.QUESTION_ICON
									])}'/>
		
		<!--end Headers-->
		
	<s:List width="100%" height="100%" id="photoList" 
			includeIn="completeStateSet,completeStateSearch,completeStateStream"
			left="10" right="10" top="10" bottom="0" 
			dataProvider="{_photoVOs}" 
			click="onListClick(event)"
			itemRenderer="ItemRenderers.PhotoListIGridItemRenderer"
			contentBackgroundAlpha="0">
		<s:layout>
			<s:TileLayout id="tileLayout" requestedColumnCount="3" 
						  columnAlign="justifyUsingGap"
			horizontalGap="5" verticalGap="20"
			paddingLeft="30" paddingRight="30" paddingTop="5" paddingBottom="5"/>
		</s:layout>
		
	</s:List>
		
	<!--<s:HGroup includeIn="completeStateSearch,completeStateStream" width="100%">
		<s:Button label="Previous" click="onClickPrevious()" width="{_halfStageWidth}"/>
		<s:Button label="Next" click="onClickNext()" width="{_halfStageWidth}"/>
	</s:HGroup>-->	
	</s:VGroup>
	
</s:View>