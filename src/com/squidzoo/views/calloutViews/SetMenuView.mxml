<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		title="Sets Menu"
		viewActivate="onViewActivate()"
		
		width="100%"
		height="100%" xmlns:components="com.squidzoo.components.*"
		creationComplete="onCreationComplete()">

	<s:states>
		<!--menu state-->
		<s:State name="menu"/>
		<s:State name="addSet"/>
		
		<!--add set state-->
		<s:State name="startState"/>
		<s:State name="waitState"/>
		<s:State name="resultState"/>
		
		<!--delete set state-->
		
		<s:State name="deleteStartState"/>
		<s:State name="deleteWaitState"/>
		<s:State name="deleteResultState"/>
		
	</s:states>

	<!--menu logic-->

	<fx:Script>
		<![CDATA[
			import com.squidzoo.ItemRenderers.calloutItemrenderers.SetsMenuItemRenderer;
			
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import mx.collections.ArrayCollection;

			[Bindable]
			private var _dp:ArrayCollection=new ArrayCollection();
	
			private function onCreationComplete():void
			{
				EventCentral.getInstance().addEventListener(CustomDataEvent.SET_SELECTED_IN_SET_LIST, onSetSelectedInSetList);
				EventCentral.getInstance().addEventListener(CustomDataEvent.SET_CALLOUTCLOSED,onCalloutClosed);
			}
			
			private function onCalloutClosed(event:CustomDataEvent):void
			{
				currentState = "menu";
			}
			
			private function onViewActivate():void
			{
				var sortAZ:Object=new Object();
				sortAZ.label="Sort A-Z";
				sortAZ.type="sortAZ";
				if(FlexGlobals.topLevelApplication.isTablet()){
					sortAZ.icon = "assets/images/v2/sortAZ60.png";
				}else{
					sortAZ.icon = "assets/images/v2/sortAZ40.png";
				}
				_dp.addItem(sortAZ);

				var sortTime:Object=new Object();
				sortTime.label="Sort by time";
				sortTime.type="sortTime";
				if(FlexGlobals.topLevelApplication.isTablet()){
					sortTime.icon = "assets/images/v2/sortTime60.png";
				}else{
					sortTime.icon = "assets/images/v2/sortTime40.png";
				}
				_dp.addItem(sortTime);

				var createSet:Object=new Object();
				createSet.label="Create new set";
				createSet.type="createSet";
				if(FlexGlobals.topLevelApplication.isTablet()){
					createSet.icon = "assets/images/v2/createNewSet60.png";
				}else{
					createSet.icon = "assets/images/v2/createNewSet40.png";
				}
				_dp.addItem(createSet);

				var deleteSet:Object=new Object();
				deleteSet.label="Delete set";
				deleteSet.type="deleteSet";
				if(FlexGlobals.topLevelApplication.isTablet()){
					deleteSet.icon = "assets/images/v2/deleteSet60.png";
				}else{
					deleteSet.icon = "assets/images/v2/deleteSet40.png";
				}
				_dp.addItem(deleteSet);
				
				var help:Object=new Object();
				help.label="Help";
				help.type="help";
				if(FlexGlobals.topLevelApplication.isTablet()){
					help.icon = "assets/images/v2/about60.png";
				}else{
					help.icon = "assets/images/v2/about40.png";
				}
				_dp.addItem(help);
			}

			private function onClick():void
			{
				if (list.selectedIndex > -1)
				{
					var selection:String=list.selectedItem.type;
					
					if (selection == "createSet")
					{
						currentState="addSet";
					}
					else if(selection == "deleteSet")
					{
						currentState = "deleteStartState";
					}
					else
					{						
						EventCentral.getInstance().dispatchEvent(new CustomDataEvent(CustomDataEvent.SET_MENU_SELECTION,null,null,selection));
					}
				}
			}

			private function chooseItemRenderer(item:Object):ClassFactory
			{
				var ir:Class=SetsMenuItemRenderer;

				return new ClassFactory(ir);
			}
		]]>
	</fx:Script>

	<!-- menu state-->

	<s:VGroup width="100%"
			  height="100%"
			  includeIn="menu">
		<s:List id="list"
				width="100%"
				height="100%"
				dataProvider="{_dp}"
				itemRendererFunction="chooseItemRenderer"
				alternatingItemColors="{[0x111111,0x111111]}"
				selectionColor="#222222"
				contentBackgroundColor="#111111"
				click="onClick()"/>
	</s:VGroup>

	<!--AddSet logic-->


	
	<fx:Script>
		<![CDATA[
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;

			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			import com.squidzoo.queries.PhotoIDQuery;

			import spark.filters.DropShadowFilter;
			import spark.transitions.SlideViewTransition;

			import com.squidzoo.statics.Service;

			[Bindable]
			private var _textInputWidth:int=FlexGlobals.topLevelApplication.stage.stageWidth - 80;

			private var _newTitle:String="";
			private var _newDescription:String="";
			private var _service:FlickrService;
			[Bindable]
			private var _newSetTitle:String="";

			[Bindable]
			private var _headerWidth:int=FlexGlobals.topLevelApplication.stage.stageWidth;

			private function onNewTitle(event:Event):void
			{
				_newTitle=event.currentTarget.text;
			}

			private function onNewDescription(event:Event):void
			{
				_newDescription=event.currentTarget.text;
			}

			private function onClickCreate(event:Event):void
			{

				if (_newTitle != "")
				{
					_service=Service.getService();
					currentState="waitState";
					EventCentral.getInstance().addEventListener(CustomDataEvent.FIRST_PHOTO_ID, onFirstPhotoId);
					var query:PhotoIDQuery=new PhotoIDQuery();
					query.requestPhotoId();
				}
			}

			/*
			*Handles photo id received from Flickr and calls
			*Flickr to create a new set
			*/
			private function onFirstPhotoId(event:CustomDataEvent):void
			{
				EventCentral.getInstance().removeEventListener(CustomDataEvent.FIRST_PHOTO_ID,onFirstPhotoId);
				var photoId:String=event.string;
				_service.addEventListener(FlickrResultEvent.PHOTOSETS_CREATE, onPhotoSetCreate);
				_service.photosets.create(_newTitle, _newDescription, photoId);
			}

			protected function onPhotoSetCreate(event:Event):void
			{
				EventCentral.getInstance().dispatchEvent(new CustomDataEvent(CustomDataEvent.NEW_SET_CREATED));
				_newSetTitle=_newTitle;
				currentState="menu";
			}
		]]>
	</fx:Script>


	
	<!--addSet State-->

	
	<s:VGroup width="100%"
			  height="100%"
			  gap="10"
			  includeIn="addSet,waitState,resultState"
			  paddingBottom="15"
			  paddingRight="5"
			  paddingTop="5"
			  paddingLeft="5"
			  horizontalAlign="center">
		<s:VGroup height="100" includeIn="waitState" paddingLeft="20" verticalAlign="middle" verticalCenter="0">
			<s:BusyIndicator scaleX="2" scaleY="2" symbolColor="white"/>
		</s:VGroup>
		
		<s:VGroup height="100" includeIn="resultState" paddingLeft="20" verticalAlign="middle" verticalCenter="0">
			<s:Label text="Your new set has been created:" color="#ffffff" fontWeight="bold" fontSize="20"/>
			<s:Label text="{_newSetTitle}" color="#ffffff" fontWeight="bold" fontSize="20"/>
		</s:VGroup>
		<s:TextArea contentBackgroundAlpha="0"
					borderVisible="false"
					editable="false"
					selectable="false"
					width="300"
					height="100"
					fontSize="16"
					color="#ffffff">
			<s:text>Your new set will include the latest pic from your stream - Flickr doesn't accept empty sets.
				</s:text>
		</s:TextArea>
		<s:TextInput width="300"
					 prompt="title"
					 contentBackgroundAlpha="1"
					 change="onNewTitle(event)"
					 contentBackgroundColor="#ffffff"/>
		<s:TextInput width="300"
					 prompt="description"
					 change="onNewDescription(event)"
					 contentBackgroundAlpha="1"
					 contentBackgroundColor="#ffffff"/>

		<s:HGroup gap="20">
			<s:Button label="Create set"
					  width="300"
					  skinClass="com.squidzoo.skins.SquareButtonSkin"
					  click="onClickCreate(event)"/>
		</s:HGroup>
	</s:VGroup>
	
	<!--delete set state-->
	
	<fx:Script>
		<![CDATA[
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			
			import com.squidzoo.statics.Service;
			private var _photosetId:String;
			
			[Bindable]private var _selection:String = "tap spinner to select";
			
			protected function onSetSelectedInSetList(event:CustomDataEvent):void
			{
				_selection = event.setVO.title;
				_photosetId = event.setVO.id;
			}
			
			protected function onClickDelete(event:MouseEvent):void
			{
				_service = Service.getService();
				currentState = "deleteWaitState"
				_service.addEventListener(FlickrResultEvent.PHOTOSETS_DELETE,onDelete);
				_service.photosets.deleteSet(_photosetId);			
			}
			
			protected function onDelete(event:FlickrResultEvent):void
			{
				currentState = "menu";
				setList.reload();
				_selection = "";
				EventCentral.getInstance().dispatchEvent(new CustomDataEvent(CustomDataEvent.SET_DELETED));
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" gap="10" includeIn="deleteStartState,deleteWaitState,deleteResultState" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		
		<s:VGroup paddingLeft="20" includeIn="deleteWaitState" height="100" horizontalCenter="0" verticalAlign="middle" verticalCenter="0">
			<s:BusyIndicator symbolColor="white" scaleX="2" scaleY="2"/>
		</s:VGroup>	
		
		<s:VGroup paddingLeft="20" includeIn="deleteResultState" height="100" verticalAlign="middle" verticalCenter="0">
			<s:Label text="The following set has been deleted:" color="#ffffff" fontSize="18" fontWeight="bold"/>
			<s:Label id="confirmationText" color="#ffffff" fontSize="18" fontWeight="bold"/>
		</s:VGroup>	
		
		<s:Label text="Selection: {_selection}"/>	
		
		<s:VGroup horizontalAlign="center" horizontalCenter="0" width="100%">				
			<components:SetList id="setList" width="100%"/>
		</s:VGroup>
		
		<s:HGroup verticalAlign="middle" gap="20">		
			<s:Button label="Delete the selected set" width="{setList.width}" click="onClickDelete(event)" skinClass="com.squidzoo.skins.SquareButtonSkin"/>
		</s:HGroup>		  
		
	</s:VGroup>
	

</s:View>
