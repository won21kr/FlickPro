<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:styles="com.squidzoo.styles.*"
		xmlns:components="com.squidzoo.components.*"
		creationComplete="creationCompleteHandler(event)"
		title="Edit set details">

	<fx:Declarations>
		<styles:GraphicsLib id="graphicsLib"/>
	</fx:Declarations>

	<s:states>
		<s:State name="startState"/>
		<s:State name="waitState"/>
		<s:State name="resultState"/>
	</s:states>

	<fx:Script>
		<![CDATA[
			import com.squidzoo.VOs.SetVO;

			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;

			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			import com.squidzoo.queries.PhotoIDQuery;

			import spark.filters.DropShadowFilter;
			import spark.transitions.SlideViewTransition;

			import com.squidzoo.statics.Service;

			import com.squidzoo.views.BrowseSets;

	

			public var forCompiler:SingleSetAddMeta;

			private var _newTitle:String="";
			private var _newDescription:String="";
			[Bindable]
			private var _resultTitle:String="";
			[Bindable]
			private var _resultDescription:String="";

			private var _service:FlickrService;

			[Bindable]
			private var _newSetTitle:String="";

			[Bindable]
			private var _setVO:SetVO;

			[Bindable]
			private var _textInputWidth:int;
			[Bindable]
			private var _textInputHeight:int;
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				if(FlexGlobals.topLevelApplication.isTablet())
				{
					_textInputWidth = GraphicsLib.getTextInputWidthForTablet();
					_textInputHeight = GraphicsLib.getTextInputHeightForTablet();
				}
				else
				{
					_textInputWidth = GraphicsLib.getTextInputWidthForPhone();
					_textInputHeight = GraphicsLib.getTextInputHeightForPhone();
				}
				
				
				currentState="startState";

				_setVO=data as SetVO;
				titleTextInput.text=_setVO.title;
				descriptionTextInput.text=_setVO.description;

				_service=Service.getService();

				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, handleSwipe);

			}

			/*
			* input from textinputs
			*/

			private function onNewTitle(event:Event):void
			{
				_newTitle=event.currentTarget.text;
			}

			private function onNewDescription(event:Event):void
			{
				_newDescription=event.currentTarget.text;
			}

			/*
			* Save edit button clicked
			*/

			private function onClickSaveEdit(event:Event):void
			{

				if (_newTitle != "")
				{
					currentState="waitState";
					_service.addEventListener(FlickrResultEvent.PHOTOSETS_EDIT_META, onEditMetaResult);
					_service.photosets.editMeta(_setVO.id, _newTitle, _newDescription);
				}
			}

			/*
			* handle response from Flickr
			*/

			protected function onEditMetaResult(event:Event):void
			{
				currentState="resultState";
				_resultTitle=_newTitle;
				_resultDescription=_newDescription;
				_setVO.title=_newTitle;
				_setVO.description=_newDescription;
			}

			override public function createReturnObject():Object
			{

				return _setVO;
			}

			/*
			* handle navigation events
			*/

			private function handleSwipe(event:TransformGestureEvent):void
			{
				if (event.offsetX == 1)
				{
					slideRight();
				}
			}

			private function onClickCancel():void
			{
				var rightSlide:SlideViewTransition=new SlideViewTransition();
				rightSlide.direction="right";
				navigator.popView(rightSlide);
			}

			private function slideRight():void
			{
				var rightSlide:SlideViewTransition=new SlideViewTransition();
				rightSlide.direction="right";
				navigator.pushView(BrowseSets, null, null, rightSlide);
			}
		]]>
	</fx:Script>

	<s:VGroup width="100%"
			  height="100%"
			  gap="0">

		<s:Scroller width="100%"
					height="100%">
			<s:VGroup width="100%" height="100%" 
					  horizontalAlign="center" verticalAlign="middle">
		
				<s:VGroup height="100"
						  includeIn="waitState"
						  verticalAlign="middle"
						  verticalCenter="0">
					<s:BusyIndicator scaleX="2"
									 scaleY="2"
									 symbolColor="white"/>
				</s:VGroup>
				
				<s:VGroup height="100"
						  includeIn="resultState"
						  verticalAlign="middle"
						  verticalCenter="0">
					<s:Label text="Your set has been edited:"/>
					<s:Label text="{_resultTitle}"/>
					<s:Label text="{_resultDescription}"/>
				</s:VGroup>

			
					<s:VGroup paddingBottom="10"
							  paddingLeft="10"
							  paddingRight="10"
							  paddingTop="10"
							  gap="50">

						<s:VGroup>
							<s:Label text="Title"/>
							<s:TextInput id="titleTextInput"
										 width="{_textInputWidth}"
										 height="{_textInputHeight}"
										 change="onNewTitle(event)"
										 contentBackgroundAlpha="1"
										 contentBackgroundColor="#ffffff"/>
						</s:VGroup>

						<s:VGroup>
							<s:Label text="Description"/>
							<s:TextInput id="descriptionTextInput"
										 width="{_textInputWidth}"
										 height="{_textInputHeight}"
										 change="onNewDescription(event)"
										 contentBackgroundAlpha="1"
										 contentBackgroundColor="#ffffff"/>
						</s:VGroup>

						<s:HGroup gap="20">
							<s:Button label="Save edit"
									  click="onClickSaveEdit(event)"
									  skinClass="com.squidzoo.skins.SquareButtonSkin"/>
							<s:Button label="Cancel"
									  click="onClickCancel()"
									  skinClass="com.squidzoo.skins.SquareButtonSkin"/>
						</s:HGroup>

					</s:VGroup>

			</s:VGroup>

		</s:Scroller>
	</s:VGroup>

</s:View>
