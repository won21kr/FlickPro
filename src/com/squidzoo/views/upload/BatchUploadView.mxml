<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		creationComplete="init()"
		viewActivate="viewActivateHandler(event)"
		xmlns:debug="com.squidzoo.debug.*"
		destructionPolicy="never"
		xmlns:components="com.squidzoo.components.*"
		title="Upload">

	<fx:Declarations>
		<s:MultiDPIBitmapSource id="plusIcon"
								source160dpi="@Embed('assets/images/v2/plus60.png')"
								source240dpi="@Embed('assets/images/v2/plus40.png')"/>
	</fx:Declarations>
	
	<s:actionContent>
		<s:Button id="setMenuButton"
				  icon="{plusIcon}"
				  fontSize="40"
				  color="#ffa500"
				  click="openCommentsCallout(setMenuButton, spark.components.ContentBackgroundAppearance.NONE)"/>
	</s:actionContent>

	<fx:Script>
		<![CDATA[
			import com.squidzoo.VOs.BatchUploadVO;
			import com.squidzoo.VOs.SetVO;

			import com.squidzoo.callouts.UploadCallout;

			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.FlickrResultEvent;
			import com.adobe.webapis.flickr.methodgroups.Upload;
			import com.chewtinfoil.utils.StringUtils;
			import com.squidzoo.debug.DebugEvent;
			import com.squidzoo.eventSystem.EventCentral;
			import com.squidzoo.eventSystem.events.CustomDataEvent;

			import com.squidzoo.helpers.GalleryBrowser;
			import com.squidzoo.helpers.Uploader;

			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;

			import spark.events.PopUpEvent;
			import spark.events.ViewNavigatorEvent;

			import com.squidzoo.statics.Service;


			private var _browser:GalleryBrowser;
			[Bindable]
			private var _selectedImage:Bitmap;
			[Bindable]
			protected var _service:FlickrService;
			[Bindable]
			private var _title:String="";
			[Bindable]
			private var _description:String="";
			[Bindable]
			private var _tags:String="";
			[Bindable]
			private var _is_family:Boolean=true;
			[Bindable]
			private var _is_public:Boolean=false;
			[Bindable]
			private var _is_friend:Boolean=false;

			[Bindable]
			private var _privacyLabel:String="family";

			private var _uploader:Upload;

			private var _fileRef:FileReference;

			[Bindable]
			private var _uploadStatus:String="not started";

			[Bindable]
			private var _batchUploadAC:ArrayCollection=new ArrayCollection(new Array());

			[Bindable]
			private var _setSelection:SetVO;

			[Bindable]
			private var _setTitle:String;

			[Bindable]
			private var _visibility:String="family";

			private var _callout:UploadCallout=new UploadCallout();

			private function viewActivateHandler(event:ViewNavigatorEvent):void
			{
				photoList.scroller.setStyle('horizontalScrollPolicy', 'ScrollPolicy.OFF');

				_service=Service.getService();

				EventCentral.getInstance().addEventListener(CustomDataEvent.REMOVE_IMAGE_FROM_UPLOAD_LIST, onRemoveImageFromList);
				EventCentral.getInstance().addEventListener(CustomDataEvent.PRIVACY_SETTINGS, onPrivacySettings);
				EventCentral.getInstance().addEventListener(CustomDataEvent.SETTINGS_SELECTED, onSettingsSelected);
				EventCentral.getInstance().addEventListener(CustomDataEvent.ADD_UPLOADED_PHOTO_TO_SET, onAddToSet);
				EventCentral.getInstance().addEventListener(CustomDataEvent.SET_FROM_SET_SELECTION_VIEW, onSetFromSetSelectionView);

				openCommentsCallout(setMenuButton, spark.components.ContentBackgroundAppearance.NONE);
			}

			protected function onSettingsSelected(event:CustomDataEvent):void
			{

				_title=StringUtils.truncate(event.settingsVO.title, 30);
				_description=event.settingsVO.description;
				_tags=event.settingsVO.tags;
				_is_family=event.settingsVO.is_family;
				_is_public=event.settingsVO.is_public;
				_is_friend=event.settingsVO.is_friend;

				if (_is_family)
				{
					_visibility="family";
				}
				else if (_is_friend)
				{
					_visibility="friend";
				}
				else
				{
					_visibility="public";
				}
			}

			private function init():void
			{
				_browser=new GalleryBrowser();
			}

			private function onClickPickPhotoButton(event:MouseEvent=null):void
			{
				_browser.addEventListener(CustomDataEvent.GALLERY_IMAGE_SELECTED, onGalleryImageSelected);
				_browser.browse();
			}

			private function onGalleryImageSelected(event:CustomDataEvent):void
			{
				_browser.removeEventListener(CustomDataEvent.GALLERY_IMAGE_SELECTED, onGalleryImageSelected);

				var selectedImage:Bitmap=event.image;

				var vo:BatchUploadVO=new BatchUploadVO(event.fileReference, selectedImage);
				vo.fileName=event.fileReference.name;
				_batchUploadAC.addItemAt(vo, 0);
				_selectedImage=selectedImage;
			}

			private function onClickUploadListButton():void
			{

				_uploader=new Upload(_service);

				for (var i:int=0; i < _batchUploadAC.length; i++)
				{

					var vo:BatchUploadVO=_batchUploadAC[i];

					_uploader.upload(vo.file, _title, _description, _tags, _is_public, _is_friend, _is_family);
				}
			}

			private function onChooseSet():void
			{

			}

			protected function onRemoveImageFromList(event:CustomDataEvent):void
			{
				for (var i:int=i; i < _batchUploadAC.length; i++)
				{
					if (event.string == _batchUploadAC[i].fileName)
					{
						_batchUploadAC.removeItemAt(i);
					}
				}
			}

			protected function onClickPrivacySettingsButton(event:MouseEvent=null):void
			{
				var dataObject:Object=new Object();
				dataObject.title=_title;
				dataObject.description=_description;
				dataObject.tags=_tags;

				dataObject.visibility=_visibility;
				navigator.pushView(SettingsView, dataObject);
			}

			protected function onPrivacySettings(event:CustomDataEvent):void
			{
				if (event.string == "public")
				{
					_is_family=false;
					_is_friend=false;
					_is_public=true;
					_privacyLabel=_visibility="Public"
				}
				else if (event.string == "friend")
				{
					_is_family=false;
					_is_friend=true;
					_is_public=false;
					_privacyLabel=_visibility="Friend";
				}
				else
				{
					_is_family=true;
					_is_friend=false;
					_is_public=false;
					_privacyLabel=_visibility="Family";
				}
			}

			private function onDebugMessage(event:DebugEvent):void
			{
			}

			private function onAddToSet(event:CustomDataEvent):void
			{
				var photoId:String=event.string;
				var setId:String=_setSelection.id;
				_service.photosets.addPhoto(setId, photoId);
			}

			private function onClickSetSelection(event:Event=null):void
			{
				navigator.pushView(SetSelectionView);
			}

			protected function onSetFromSetSelectionView(event:CustomDataEvent):void
			{
				_setSelection=event.setVO as SetVO;
				_setTitle=event.setVO.title;
			}

			private function openCommentsCallout(owner:UIComponent, value:String):void
			{
				_callout.addEventListener('close', closeMainMenuCalloutHandler);
				_callout.setStyle('contentBackgroundAppearance', value);
				_callout.open(owner);
			}

			private function closeMainMenuCalloutHandler(event:PopUpEvent):void
			{
				if (!event.commit)
					return;

				_callout.removeEventListener('close', closeMainMenuCalloutHandler);

				selectView(event.data.selection);
			}

			private function selectView(selection:String):void
			{
				switch (selection)
				{
					case "choosePhoto":
						onClickPickPhotoButton();
						break;
					case "edit":
						onClickPrivacySettingsButton();
						break;
					case "chooseSet":
						onClickSetSelection();
						break;
					case "startUpload":
						onClickUploadListButton();
						break;
					case "help":
						break;
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:RadioButtonGroup id="PermissionRadioButtonsGroup"/>
	</fx:Declarations>

	<!--<s:actionContent>
	<s:Button id="menuButton" icon="@Embed(source='assets/images/menuLightGrey.png')" click="_popup.show()"/>
	</s:actionContent>-->
	<s:VGroup width="100%"
			  height="100%"
			  >
		


		<!--<components:UploadDetailsDisplay title="{_title}" description="{_description}" tags="{_tags}" set="{_setTitle}" privacy="{_visibility}"/>-->
		<s:List id="photoList"
				width="100%"
				height="100%"
				dataProvider="{_batchUploadAC}"
				itemRenderer="com.squidzoo.ItemRenderers.BatchUploadItemRenderer"
				contentBackgroundAlpha="0"
				useVirtualLayout="false"
				>
			<s:layout>
				<s:VerticalLayout verticalAlign="top"/>
			</s:layout>
		</s:List>
	
	</s:VGroup>

</s:View>
